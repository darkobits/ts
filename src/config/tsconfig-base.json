{
  "compilerOptions": {
    // Enable all strict type checking options.
    // See: https://www.typescriptlang.org/tsconfig#stric
    "strict": true,
    // Set the JavaScript language version for emitted JavaScript and include
    // compatible library declarations.
    // See: https://www.typescriptlang.org/tsconfig#target
    "target": "ESNext",
    // Specify a set of bundled library declaration files that describe the
    // target runtime environment.
    // See: https://www.typescriptlang.org/tsconfig#lib
    "lib": ["ESNext"],
    // Specify what module code is generated. ESNext is _required_ here in order
    // to preserve dynamic imports when outputting as CommonJS. In most cases,
    // this will not affect Vite's output, but tooling that relies on
    // tsconfig.json (ie: configuration file loaders) that do _not_ use Vite
    // will be affected by this.
    // See: https://www.typescriptlang.org/tsconfig#module
    "module": "ESNext",
    // Specify how TypeScript resolves a file from a given module specifier. We
    // use the "bundler" option because, among other things, it allows us to
    // omit file extensions from import specifiers, which are required when
    // using strict ESM modes.
    // See: https://www.typescriptlang.org/tsconfig#moduleResolution
    "moduleResolution": "bundler",
    // Allow JavaScript files to be a part of your program. Use the checkJS
    // option to get errors from these files.
    // See: https://www.typescriptlang.org/tsconfig#allowJs
    "allowJs": true,
    // Allow 'import x from y' when a module doesn't have a default export.
    // See: https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports
    "allowSyntheticDefaultImports": true,
    // Generate .d.ts files from TypeScript and JavaScript files in your project.
    // See: https://www.typescriptlang.org/tsconfig#declaration
    "declaration": true,
    // Emit additional code to ease support for importing CommonJS from ESM.
    // See: https://www.typescriptlang.org/tsconfig#esModuleInterop
    "esModuleInterop": true,
    // Differentiate between undefined and not present when type checking.
    // See: https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes
    "exactOptionalPropertyTypes": true,
    // Enable error reporting when a local variables aren't read.
    // See more: https://www.typescriptlang.org/tsconfig#noUnusedLocals
    "noUnusedLocals": true,
    // Enable color and formatting in output to make compiler errors easier to
    // read.
    // See: https://www.typescriptlang.org/tsconfig#pretty
    "pretty": true,
    // Enable importing .json files.
    // See: https://www.typescriptlang.org/tsconfig#resolveJsonModule
    "resolveJsonModule": true,
    // Skip type checking all .d.ts files in external dependencies.
    // See: https://www.typescriptlang.org/tsconfig#skipLibCheck
    "skipLibCheck": true
  }
}
