{
  "compilerOptions": {
    // Enable all strict type checking options.
    // See more: https://www.typescriptlang.org/tsconfig#stric
    "strict": true,

    // Set the JavaScript language version for emitted JavaScript and include
    // compatible library declarations.
    // See more: https://www.typescriptlang.org/tsconfig#target
    "target": "ESNext",

    // Specify a set of bundled library declaration files that describe the
    // target runtime environment.
    // See more: https://www.typescriptlang.org/tsconfig#lib
    "lib": ["ESNext", "ES2022"],

    // Specify what module code is generated. For the foreseeable future,
    // outputting CommonJS provides the best experience for downstream consumers
    // regardless of whether they are authoring their packages using ESM syntax,
    // TypeScript, or CommonJS.
    //
    // [Note] ESNext is _required_ here in order to preserve dynamic imports
    // when outputting as CommonJS. In most cases, this will not affect Vite's
    // output, but tooling that relies on tsconfig.json (ie: configuration file
    // loaders) that do _not_ use Vite will be affected by this.
    //
    // See more: https://www.typescriptlang.org/tsconfig#module
    "module": "ESNext",

    // Specify how TypeScript looks-up a file from a given module specifier. We
    // use the "bundler" option because, among other things, it allows us to
    // omit file extensions from import specifiers, which are required when
    // using strict ESM modes.
    // See more: https://www.typescriptlang.org/tsconfig#moduleResolution
    "moduleResolution": "bundler",

    // Allow JavaScript files to be a part of your program. Use the checkJS
    // option to get errors from these files.
    // See more: https://www.typescriptlang.org/tsconfig#allowJs
    "allowJs": true,

    // Allow 'import x from y' when a module doesn't have a default export.
    // See more: https://www.typescriptlang.org/tsconfig#allowSyntheticDefaultImports
    "allowSyntheticDefaultImports": true,

    // Adds support for ES2015 iteration semantics such as the spread operator
    // when compiling to older targets. Because we don't actually use TypeScript
    // for compilation, this setting has the effect of suppressing TypeScript
    // errors when such operators are used.
    // See: https://mariusschulz.com/blog/downlevel-iteration-for-es3-es5-in-typescript
    "downlevelIteration": true,

    // Emit design-type metadata for decorated declarations in source files.
    // See more: https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata
    "emitDecoratorMetadata": true,

    // Generate .d.ts files from TypeScript and JavaScript files in your project.
    // See more: https://www.typescriptlang.org/tsconfig#declaration
    "declaration": true,

    // Only output d.ts files and not JavaScript files.
    // See more: https://www.typescriptlang.org/tsconfig#emitDeclarationOnly
    // "emitDeclarationOnly": true,

    // Emit additional JavaScript to ease support for importing CommonJS
    // modules. This enables allowSyntheticDefaultImports for type
    // compatibility.
    // See more: https://www.typescriptlang.org/tsconfig#esModuleInterop
    "esModuleInterop": true,

    // Differentiate between undefined and not present when type checking
    // See more: https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes
    "exactOptionalPropertyTypes": true,

    // Enable experimental support for TC39 stage 2 draft decorators.
    // See more: https://www.typescriptlang.org/tsconfig#experimentalDecorators
    "experimentalDecorators": true,

    // Enable error reporting for expressions and declarations with an implied
    // any type.
    // See more: https://www.typescriptlang.org/tsconfig#noImplicitAny
    "noImplicitAny": true,

    // Enable error reporting when a local variables aren't read.
    // See more: https://www.typescriptlang.org/tsconfig#noUnusedLocals
    "noUnusedLocals": true,

    // Enable color and formatting in output to make compiler errors easier to
    // read.
    // See more: https://www.typescriptlang.org/tsconfig#pretty
    "pretty": true,

    // Enable importing .json files.
    // See more: https://www.typescriptlang.org/tsconfig#resolveJsonModule
    "resolveJsonModule": true,

    // Skip type checking all .d.ts files in external dependencies.
    // See more: https://www.typescriptlang.org/tsconfig#skipLibCheck
    "skipLibCheck": true,

    // Create source map files for emitted JavaScript files.
    // See more: https://www.typescriptlang.org/tsconfig#sourceMap
    "sourceMap": true
  }
}
